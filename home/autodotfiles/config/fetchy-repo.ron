(
  name: "AutoDotFiles",
  description: "Repository for AutoDotFiles",
  packages: [
    (
      name: "bat",
      download: (
        source: GitHub(
          author: "sharkdp",
          repo_name: "bat",
          asset_pattern: ([
            (x86_64, linux, "-x86_64-unknown-linux-musl.tar.gz$"),
            (aarch64, linux, "-aarch64-unknown-linux-gnu.tar.gz$")
          ])
        ),
        file_format: Archive(
          format: TarGz,
          files: [
            (
              relative_path: "bat-.*/bat$",
              file_type: Binary(
                copy_as: "bat"
              )
            )
          ]
        ),
        version_extraction: (
          source: TagName
        )
      )
    ),
    (
      name: "bjobs",
      download: (
        source: GitHub(
          author: "ClementNerma",
          repo_name: "BackgroundJobs",
          asset_pattern: ([
            (x86_64, linux, "-x86_64-unknown-linux-musl.tar.xz$"),
            (aarch64, linux, "-aarch64-unknown-linux-musl.tar.xz$")
          ])
        ),
        file_format: Archive(
          format: TarXz,
          files: [
            (
              relative_path: "/bjobs$",
              file_type: Binary(
                copy_as: "bjobs"
              )
            )
          ]
        ),
        version_extraction: (
          source: TagName
        )
      )
    ),
    (
      name: "cargo-binstall",
      download: (
        source: GitHub(
          author: "cargo-bins",
          repo_name: "cargo-binstall",
          asset_pattern: ([
            (x86_64, linux, "-x86_64-unknown-linux-musl.tgz$"),
            (aarch64, linux, "-aarch64-unknown-linux-musl.tgz$")
          ])
        ),
        file_format: Archive(
          format: TarGz,
          files: [
            (
              relative_path: "^cargo-binstall$",
              file_type: Binary(
                copy_as: "cargo-binstall"
              )
            )
          ]
        ),
        version_extraction: (
          source: TagName
        )
      )
    ),
    (
      name: "crony",
      download: (
        source: GitHub(
          author: "ClementNerma",
          repo_name: "Crony",
          asset_pattern: ([
            (x86_64, linux, "-x86_64-unknown-linux-musl.tar.xz$"),
            (aarch64, linux, "-aarch64-unknown-linux-musl.tar.xz$")
          ])
        ),
        file_format: Archive(
          format: TarXz,
          files: [
            (
              relative_path: "/crony$",
              file_type: Binary(
                copy_as: "crony"
              )
            )
          ]
        ),
        version_extraction: (
          source: TagName
        )
      )
    ),
    (
      name: "erdtree",
      download: (
        source: GitHub(
          author: "solidiquis",
          repo_name: "erdtree",
          asset_pattern: ([
            (x86_64, linux, "-x86_64-unknown-linux-gnu.tar.gz$"),
            (aarch64, linux, "-aarch64-unknown-linux-musl.tar.gz$")
          ])
        ),
        file_format: Archive(
          format: TarGz,
          files: [
            (
              relative_path: "^erd$",
              file_type: Binary(
                copy_as: "erd"
              )
            )
          ]
        ),
        version_extraction: (
          source: TagName
        )
      )
    ),
    (
      name: "exa",
      download: (
        source: GitHub(
          author: "ogham",
          repo_name: "exa",
          asset_pattern: ([
            (x86_64, linux, "-linux-x86_64-musl-v.*.zip$"),
            (aarch64, linux, "-linux-armv7-v.*.zip$")
          ])
        ),
        file_format: Archive(
          format: Zip,
          files: [
            (
              relative_path: "^bin/exa",
              file_type: Binary(
                copy_as: "exa"
              )
            )
          ]
        ),
        version_extraction: (
          source: TagName
        )
      )
    ),
    (
      name: "fd",
      download: (
        source: GitHub(
          author: "sharkdp",
          repo_name: "fd",
          asset_pattern: ([
            (x86_64, linux, "-x86_64-unknown-linux-musl.tar.gz$"),
            (aarch64, linux, "-aarch64-unknown-linux-gnu.tar.gz$")
          ])
        ),
        file_format: Archive(
          format: TarGz,
          files: [
            (
              relative_path: "^fd-.*/fd$",
              file_type: Binary(
                copy_as: "fd"
              )
            )
          ]
        ),
        version_extraction: (
          source: TagName
        )
      )
    ),
    (
      name: "ffmpeg",
      download: (
        source: Direct(
          url: ([
            (x86_64, linux, "https://johnvansickle.com/ffmpeg/releases/ffmpeg-release-amd64-static.tar.xz"),
            (aarch64, linux, "https://johnvansickle.com/ffmpeg/releases/ffmpeg-release-arm64-static.tar.xz"),
          ])
        ),
        file_format: Archive(
          format: TarXz,
          files: [
            (
              relative_path: "^ffmpeg-[\\d\\.]+-(arm|amd)64-static/ffmpeg$",
              file_type: Binary(
                copy_as: "ffmpeg"
              )
            ),
            (
              relative_path: "^ffmpeg-[\\d\\.]+-(arm|amd)64-static/ffprobe$",
              file_type: Binary(
                copy_as: "ffprobe"
              )
            )
          ]
        ),
        version_extraction: (
          source: Url,
          regex: Some("(.*)"),
          skip_validation: Some(true)
          // TODO: find a way to extraction version number
        )
      )
    ),
    (
      name: "filebrowser",
      download: (
        source: GitHub(
          author: "filebrowser",
          repo_name: "filebrowser",
          asset_pattern: ([
            (x86_64, linux, "^linux-amd64-filebrowser.tar.gz$"),
            (aarch64, linux, "^linux-arm64-filebrowser.tar.gz$")
          ])
        ),
        file_format: Archive(
          format: TarGz,
          files: [
            (
              relative_path: "^filebrowser$",
              file_type: Binary(
                copy_as: "filebrowser"
              )
            )
          ]
        ),
        version_extraction: (
          source: TagName
        )
      )
    ),
    (
      name: "gitui",
      download: (
        source: GitHub(
          author: "extrawurst",
          repo_name: "gitui",
          asset_pattern: ([
            (x86_64, linux, "^gitui-linux-musl.tar.gz$"),
            (aarch64, linux, "^gitui-linux-aarch64.tar.gz$")
          ])
        ),
        file_format: Archive(
          format: TarGz,
          files: [
            (
              relative_path: "^(./)?gitui$",
              file_type: Binary(
                copy_as: "gitui"
              )
            )
          ]
        ),
        version_extraction: (
          source: TagName
        )
      )
    ),
    (
      name: "helix",
      download: (
        source: GitHub(
          author: "helix-editor",
          repo_name: "helix",
          asset_pattern: ([
            (x86_64, linux, "-x86_64-linux.tar.xz$"),
            (aarch64, linux, "-aarch64-linux.tar.xz$")
          ])
        ),
        file_format: Archive(
          format: TarXz,
          files: [
            (
              relative_path: "-linux/hx$",
              file_type: Binary(
                copy_as: "hx"
              )
            ),
            (
              relative_path: "-linux/runtime$",
              file_type: ConfigSubDir(
                copy_as: "runtime"
              )
            )
          ]
        ),
        version_extraction: (
          source: TagName
        )
      )
    ),
    (
      name: "jumpy",
      download: (
        source: GitHub(
          author: "ClementNerma",
          repo_name: "Jumpy",
          asset_pattern: ([
            (x86_64, linux, "-x86_64-unknown-linux-musl.tar.xz$"),
            (aarch64, linux, "-aarch64-unknown-linux-musl.tar.xz$")
          ])
        ),
        file_format: Archive(
          format: TarXz,
          files: [
            (
              relative_path: "/jumpy$",
              file_type: Binary(
                copy_as: "jumpy"
              )
            )
          ]
        ),
        version_extraction: (
          source: TagName
        )
      )
    ),
    (
      name: "kopia",
      download: (
        source: GitHub(
          author: "kopia",
          repo_name: "kopia",
          asset_pattern: ([
            (x86_64, linux, "-linux-x64.tar.gz$"),
            (aarch64, linux, "-linux-arm64.tar.gz$")
          ])
        ),
        file_format: Archive(
          format: TarGz,
          files: [
            (
              relative_path: "^kopia-.*/kopia$",
              file_type: Binary(
                copy_as: "kopia"
              )
            )
          ]
        ),
        version_extraction: (
          source: TagName
        )
      )
    ),
    (
      name: "gdu",
      download: (
        source: GitHub(
          author: "dundee",
          repo_name: "gdu",
          asset_pattern: ([
            (x86_64, linux, "^gdu_linux_amd64.tgz$"),
            (aarch64, linux, "^gdu_linux_arm64.tgz$")
          ])
        ),
        file_format: Archive(
          format: TarGz,
          files: [
            (
              relative_path: "^gdu_linux_(amd|arm)64$",
              file_type: Binary(
                copy_as: "gdu"
              )
            )
          ]
        ),
        version_extraction: (
          source: TagName
        )
      )
    ),
    (
      name: "github-cli",
      download: (
        source: GitHub(
          author: "cli",
          repo_name: "cli",
          asset_pattern: ([
            (x86_64, linux, "_linux_amd64.tar.gz$"),
            (aarch64, linux, "_linux_arm64.tar.gz$")
          ])
        ),
        file_format: Archive(
          format: TarGz,
          files: [
            (
              relative_path: "/bin/gh$",
              file_type: Binary(
                copy_as: "gh"
              )
            )
          ]
        ),
        version_extraction: (
          source: TagName
        )
      )
    ),
    (
      name: "lazydocker",
      download: (
        source: GitHub(
          author: "jesseduffield",
          repo_name: "lazydocker",
          asset_pattern: ([
            (x86_64, linux, "_Linux_x86_64.tar.gz$"),
            (aarch64, linux, "_Linux_arm64.tar.gz$")
          ])
        ),
        file_format: Archive(
          format: TarGz,
          files: [
            (
              relative_path: "^lazydocker$",
              file_type: Binary(
                copy_as: "lazydocker"
              )
            )
          ]
        ),
        version_extraction: (
          source: TagName
        )
      )
    ),
    (
      name: "neovim",
      download: (
        source: GitHub(
          author: "neovim",
          repo_name: "neovim",
          asset_pattern: ([
            (x86_64, linux, "^nvim.appimage$")
          ])
        ),
        file_format: Binary(
          filename: "nvim"
        ),
        version_extraction: (
          source: TagName
        )
      )
    ),
    (
      name: "nushell",
      download: (
        source: GitHub(
          author: "nushell",
          repo_name: "nushell",
          asset_pattern: ([
            (x86_64, linux, "-x86_64-unknown-linux-musl.tar.gz$"),
            (aarch64, linux, "-aarch64-unknown-linux-musl.tar.gz$")
          ])
        ),
        file_format: Archive(
          format: TarGz,
          files: [
            (
              relative_path: "-unknown-linux-musl/nu$",
              file_type: Binary(
                copy_as: "nu"
              )
            )
          ]
        ),
        version_extraction: (
          source: TagName
        )
      )
    ),
    (
      name: "ripgrep",
      download: (
        source: GitHub(
          author: "BurntSushi",
          repo_name: "ripgrep",
          asset_pattern: ([
            (x86_64, linux, "-x86_64-unknown-linux-musl.tar.gz$"),
            (aarch64, linux, "-arm-unknown-linux-gnueabihf.tar.gz$")
          ])
        ),
        file_format: Archive(
          format: TarGz,
          files: [
            (
              relative_path: "^ripgrep-.*/rg$",
              file_type: Binary(
                copy_as: "rg"
              )
            )
          ]
        ),
        version_extraction: (
          source: TagName
        )
      )
    ),
    (
      name: "scout",
      download: (
        source: GitHub(
          author: "jhbabon",
          repo_name: "scout",
          asset_pattern: ([
            (x86_64, linux, "^scout-linux$")
          ])
        ),
        file_format: Binary(
          filename: "scout"
        ),
        version_extraction: (
          source: TagName
        )
      )
    ),
    (
      name: "starship",
      download: (
        source: GitHub(
          author: "starship",
          repo_name: "starship",
          asset_pattern: ([
            (x86_64, linux, "^starship-x86_64-unknown-linux-musl.tar.gz$"),
            (aarch64, linux, "^starship-aarch64-unknown-linux-musl.tar.gz$")
          ])
        ),
        file_format: Archive(
          format: TarGz,
          files: [
            (
              relative_path: "^starship$",
              file_type: Binary(
                copy_as: "starship"
              )
            )
          ]
        ),
        version_extraction: (
          source: TagName
        )
      )
    ),
    (
      name: "syncer-client",
      download: (
        source: GitHub(
          author: "ClementNerma",
          repo_name: "Syncer",
          asset_pattern: ([
            (x86_64, linux, "^syncer-client-.*-x86_64-unknown-linux-musl.tar.xz$"),
            (x86_64, linux, "^syncer-client-.*-aarch64-unknown-linux-musl.tar.xz$")
          ])
        ),
        file_format: Archive(
          format: TarXz,
          files: [
            (
              relative_path: "/syncer-client$",
              file_type: Binary(
                copy_as: "syncer-client"
              )
            )
          ]
        ),
        version_extraction: (
          source: TagName
        )
      )
    ),
    (
      name: "syncer-server",
      download: (
        source: GitHub(
          author: "ClementNerma",
          repo_name: "Syncer",
          asset_pattern: ([
            (x86_64, linux, "^syncer-server-.*-x86_64-unknown-linux-musl.tar.xz$"),
            (x86_64, linux, "^syncer-server-.*-aarch64-unknown-linux-musl.tar.xz$")
          ])
        ),
        file_format: Archive(
          format: TarXz,
          files: [
            (
              relative_path: "/syncer-server$",
              file_type: Binary(
                copy_as: "syncer-server"
              )
            )
          ]
        ),
        version_extraction: (
          source: TagName
        )
      )
    ),
      (
      name: "sloth-client",
      download: (
        source: GitHub(
          author: "ClementNerma",
          repo_name: "Sloth",
          asset_pattern: ([
            (x86_64, linux, "^sloth-client-.*-x86_64-unknown-linux-musl.tar.xz$"),
            (x86_64, linux, "^sloth-client-.*-aarch64-unknown-linux-musl.tar.xz$")
          ])
        ),
        file_format: Archive(
          format: TarXz,
          files: [
            (
              relative_path: "/sloth-client$",
              file_type: Binary(
                copy_as: "sloth-client"
              )
            )
          ]
        ),
        version_extraction: (
          source: TagName
        )
      )
    ),
    (
      name: "sloth-server",
      download: (
        source: GitHub(
          author: "ClementNerma",
          repo_name: "Sloth",
          asset_pattern: ([
            (x86_64, linux, "^sloth-server-.*-x86_64-unknown-linux-musl.tar.xz$"),
            (x86_64, linux, "^sloth-server-.*-aarch64-unknown-linux-musl.tar.xz$")
          ])
        ),
        file_format: Archive(
          format: TarXz,
          files: [
            (
              relative_path: "/sloth-server$",
              file_type: Binary(
                copy_as: "sloth-server"
              )
            )
          ]
        ),
        version_extraction: (
          source: TagName
        )
      )
    ),
    (
      name: "tokei",
      download: (
        source: GitHub(
          author: "XAMPPRocky",
          repo_name: "tokei",
          asset_pattern: ([
            (x86_64, linux, "^tokei-x86_64-unknown-linux-musl.tar.gz$"),
            (aarch64, linux, "^tokei-aarch64-unknown-linux-gnu.tar.gz$")
          ])
        ),
        file_format: Archive(
          format: TarGz,
          files: [
            (
              relative_path: "^tokei$",
              file_type: Binary(
                copy_as: "tokei"
              )
            )
          ]
        ),
        version_extraction: (
          source: TagName
        )
      )
    ),
    (
      name: "topgrade",
      download: (
        source: GitHub(
          author: "topgrade-rs",
          repo_name: "topgrade",
          asset_pattern: ([
            (x86_64, linux, "-x86_64-unknown-linux-musl.tar.gz$"),
            (aarch64, linux, "-aarch64-unknown-linux-musl.tar.gz$")
          ])
        ),
        file_format: Archive(
          format: TarGz,
          files: [
            (
              relative_path: "^topgrade$",
              file_type: Binary(
                copy_as: "topgrade"
              )
            )
          ]
        ),
        version_extraction: (
          source: TagName
        )
      )
    ),
    (
      name: "trasher",
      download: (
        source: GitHub(
          author: "ClementNerma",
          repo_name: "Trasher",
          asset_pattern: ([
            (x86_64, linux, "-x86_64-unknown-linux-musl.tar.xz$"),
            (aarch64, linux, "-aarch64-unknown-linux-musl.tar.xz$")
          ])
        ),
        file_format: Archive(
          format: TarXz,
          files: [
            (
              relative_path: "/trasher$",
              file_type: Binary(
                copy_as: "trasher"
              )
            )
          ]
        ),
        version_extraction: (
          source: TagName
        )
      )
    ),
    (
      name: "unison",
      download: (
        source: GitHub(
          author: "bcpierce00",
          repo_name: "unison",
          asset_pattern: ([
            (x86_64, linux, "^unison-([\\d\\.]+)-ubuntu-x86_64.tar.gz$")
          ])
        ),
        file_format: Archive(
          format: TarGz,
          files: [
            (
              relative_path: "^bin/unison$",
              file_type: Binary(
                copy_as: "unison"
              )
            )
          ]
        ),
        version_extraction: (
          source: TagName
        )
      )
    ),
    (
      name: "yt-dlp",
      download: (
        source: GitHub(
          author: "yt-dlp",
          repo_name: "yt-dlp-nightly-builds",
          asset_pattern: ([
            (x86_64, linux, "^yt-dlp$"),
            (aarch64, linux, "^yt-dlp_linux_aarch64$")
          ])
        ),
        file_format: Binary(
          filename: "yt-dlp"
        ),
        version_extraction: (
          source: TagName
        )
      )
    ),
    (
      name: "ytdl",
      download: (
        source: GitHub(
          author: "ClementNerma",
          repo_name: "ytdl",
          asset_pattern: ([
            (x86_64, linux, "-x86_64-unknown-linux-musl.tar.xz$"),
            (aarch64, linux, "-aarch64-unknown-linux-musl.tar.xz$")
          ])
        ),
        file_format: Archive(
          format: TarXz,
          files: [
            (
              relative_path: "/ytdl$",
              file_type: Binary(
                copy_as: "ytdl"
              )
            )
          ]
        ),
        version_extraction: (
          source: TagName
        )
      )
    ),
    (
      name: "zellij",
      download: (
        source: GitHub(
          author: "zellij-org",
          repo_name: "zellij",
          asset_pattern: ([
            (x86_64, linux, "^zellij-x86_64-unknown-linux-musl.tar.gz$"),
            (aarch64, linux, "^zellij-aarch64-unknown-linux-musl.tar.gz$")
          ])
        ),
        file_format: Archive(
          format: TarGz,
          files: [
            (
              relative_path: "^zellij$",
              file_type: Binary(
                copy_as: "zellij"
              )
            )
          ]
        ),
        version_extraction: (
          source: TagName
        )
      )
    )
  ]
)